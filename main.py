from telebot import TeleBot
from telebot.types import Message, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from dataclasses import dataclass
from datetime import datetime, timedelta
from _thread import start_new_thread
from time import time, sleep
from config import TOKEN

bot = TeleBot(TOKEN)
bot.set_my_commands([
    BotCommand('start', '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
    BotCommand('browse_tasks', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏'),
    BotCommand('add_task', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É'),
    BotCommand('server_time', '–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'),
    BotCommand('help', '–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º')
])


@dataclass
class Task:
    id: int
    user_id: int
    notify_time: datetime = None
    text: str = None
    audio_path: str = None
    is_created: bool = False


tasks: list[Task] = []


@bot.message_handler(commands=['start'])
def start(message: Message):
    text = f'''
    –ü—Ä–∏–≤–µ—Ç, <b>{message.chat.first_name}</b> üëã
    
–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Ç–≤–æ–∏—Ö –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö üìç
    '''
    bot.send_message(message.chat.id, text, 'html')

    text = f'''
–í–≤–µ–¥–∏—Ç–µ /add_task , —á—Ç–æ–±—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É ‚ûï
–í–≤–µ–¥–∏—Ç–µ /browse_tasks , –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ üìÉ
–í–≤–µ–¥–∏—Ç–µ /server_time , —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –≤—ã—á–∏—Å–ª–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
    '''.strip()
    bot.send_message(message.chat.id, text, 'html')


@bot.message_handler(commands=['help'])
def help_(message: Message):
    text = f'''
–í–≤–µ–¥–∏—Ç–µ /add_task , —á—Ç–æ–±—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É ‚ûï
–í–≤–µ–¥–∏—Ç–µ /browse_tasks , –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ üìÉ
–í–≤–µ–¥–∏—Ç–µ /server_time , —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –≤—ã—á–∏—Å–ª–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
    '''.strip()
    bot.send_message(message.chat.id, text, 'html')


@bot.message_handler(commands=['server_time'])
def server_time(message: Message):
    bot.send_message(message.chat.id, str(datetime.now()))


@bot.message_handler(commands=['browse_tasks'])
def browse_tasks(message: Message):
    tasks_qs = list(filter(lambda t: t.user_id == message.chat.id, tasks))

    if not tasks_qs:
        bot.send_message(message.chat.id, '–ü–æ–∫–∞ –∑–∞–¥–∞—á –Ω–µ –Ω–∞–±–ª—é–¥–∞—é üò™')

    for task in tasks_qs:
        if task.text:
            text = f'<b>{task.text}</b>\n–ù–∞–ø–æ–º–Ω—é: <i>{task.notify_time}</i>'
        else:
            text = f'<b>–ê—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n–ù–∞–ø–æ–º–Ω—é: <i>{task.notify_time}</i>'

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å üóëÔ∏è', callback_data=f'del-{task.id}'))

        bot.send_message(message.chat.id, text, 'html', reply_markup=markup)


@bot.message_handler(commands=['add_task'])
def add_task(message: Message):
    new_message = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É üñäÔ∏è –∏–ª–∏ –∑–∞–ø–∏—à–∏–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üé§')

    bot.register_next_step_handler(new_message, add_task_1_next_step_handler)


def add_task_1_next_step_handler(message: Message):
    if message.text:
        tasks.append(Task(
            int(time()),
            message.chat.id,
            text=message.text
        ))
    elif message.voice:
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        path = f'./voice/{message.chat.id}_{int(time())}.ogg'

        with open(path, 'wb') as new_file:
            new_file.write(downloaded_file)

        tasks.append(Task(
            int(time()),
            message.chat.id,
            audio_path=path
        ))
    else:
        tasks.append(Task(
            message.chat.id,
            text='–ü—É—Å—Ç–æ, –±–ª–∏–Ω :('
        ))

    text = '''
–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ–º –≤—Ä–µ–º—è üïë
–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ç–≤–æ–µ–º –¥–µ–ª–µ?

–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>HH:MM:SS</b> ‚åõ
–ò–ª–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>YYYY-MM-DD=HH:MM:SS</b> üìÖ
–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –±—ã—Å—Ç—Ä—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ üòÅ
    '''
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç', callback_data='fast-15min'))
    markup.add(InlineKeyboardButton('–ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç', callback_data='fast-30min'))
    markup.add(InlineKeyboardButton('–ß–µ—Ä–µ–∑ 1 —á–∞—Å', callback_data='fast-1h'))
    markup.add(InlineKeyboardButton('–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞', callback_data='fast-2h'))
    markup.add(InlineKeyboardButton('–ß–µ—Ä–µ–∑ 1 –¥–µ–Ω—å', callback_data='fast-1d'))
    markup.add(InlineKeyboardButton('–ß–µ—Ä–µ–∑ 2 –¥–Ω—è', callback_data='fast-2d'))
    markup.add(InlineKeyboardButton('–ß–µ—Ä–µ–∑ 1 –Ω–µ–¥–µ–ª—é', callback_data='fast-1w'))

    new_message = bot.send_message(message.chat.id, text, 'html', reply_markup=markup)

    bot.register_next_step_handler(new_message, add_task_2_next_step_handler)


def add_task_2_next_step_handler(message: Message):
    if len(message.text) == 8:
        local_tasks = list(filter(lambda t: t.user_id == message.chat.id and not t.is_created, tasks))

        if not local_tasks:
            return bot.send_message(message.chat.id, '–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞—Å–∫—É, '
                                                     '–ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≥–æ üò•')

        task: Task = local_tasks[0]

        try:
            hours, minutes, seconds = list(map(int, message.text.split(':')))

            task.notify_time = datetime(
                datetime.now().year,
                datetime.now().month,
                datetime.now().day,
                hours,
                minutes,
                seconds,
                0,
            )

            task.is_created = True

            return bot.send_message(message.chat.id, '–í—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!')
        except:
            pass

    elif len(message.text) == 19:
        local_tasks = list(filter(lambda t: t.user_id == message.chat.id and not t.is_created, tasks))

        if not local_tasks:
            return bot.send_message(message.chat.id, '–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞—Å–∫—É, '
                                                     '–ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≥–æ üò•')

        task: Task = local_tasks[0]

        try:
            years, months, days = list(map(int, message.text.split('=')[0].split('-')))
            hours, minutes, seconds = list(map(int, message.text.split('=')[1].split(':')))

            task.notify_time = datetime(
                years,
                months,
                days,
                hours,
                minutes,
                seconds,
                0,
            )

            task.is_created = True

            return bot.send_message(message.chat.id, '–í—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!')
        except:
            pass

    bot.send_message(message.chat.id, '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ üò•')

    text = '''
–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è üïë
–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ç–≤–æ–µ–º –¥–µ–ª–µ?

–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>HH:MM:SS</b> ‚åõ
–ò–ª–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>YYYY-MM-DD-HH:MM:SS</b> üìÖ
–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –±—ã—Å—Ç—Ä—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ üòÅ
        '''
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç', callback_data='fast-15min'))
    markup.add(InlineKeyboardButton('–ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç', callback_data='fast-30min'))
    markup.add(InlineKeyboardButton('–ß–µ—Ä–µ–∑ 1 —á–∞—Å', callback_data='fast-1h'))
    markup.add(InlineKeyboardButton('–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞', callback_data='fast-2h'))
    markup.add(InlineKeyboardButton('–ß–µ—Ä–µ–∑ 1 –¥–µ–Ω—å', callback_data='fast-1d'))
    markup.add(InlineKeyboardButton('–ß–µ—Ä–µ–∑ 2 –¥–Ω—è', callback_data='fast-2d'))
    markup.add(InlineKeyboardButton('–ß–µ—Ä–µ–∑ 1 –Ω–µ–¥–µ–ª—é', callback_data='fast-1w'))

    new_message = bot.send_message(message.chat.id, text, 'html', reply_markup=markup)

    bot.register_next_step_handler(new_message, add_task_2_next_step_handler)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call: CallbackQuery):
    if call.data:
        if call.data.startswith('del-'):
            task = list(filter(lambda t: t.id == int(call.data.split('-')[1]), tasks))

            if task:
                tasks.remove(task[0])
                bot.send_message(call.message.chat.id, '–¢–∞—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∞—Å—å!')
            else:
                bot.send_message(call.message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∫—É :(')
        elif call.data.startswith('fast-'):
            time_case = call.data.split('-')[1]
            message = call.message
            local_tasks = list(filter(lambda t: t.user_id == message.chat.id and not t.is_created, tasks))

            if not local_tasks:
                return bot.send_message(message.chat.id, '–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞—Å–∫—É, '
                                                         '–ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≥–æ üò•')

            task: Task = local_tasks[0]

            if time_case == '15min':
                task.notify_time = datetime.now() + timedelta(minutes=15)
            elif time_case == '30min':
                task.notify_time = datetime.now() + timedelta(minutes=30)
            elif time_case == '1h':
                task.notify_time = datetime.now() + timedelta(hours=1)
            elif time_case == '2h':
                task.notify_time = datetime.now() + timedelta(hours=2)
            elif time_case == '1d':
                task.notify_time = datetime.now() + timedelta(days=1)
            elif time_case == '2d':
                task.notify_time = datetime.now() + timedelta(days=2)
            elif time_case == '1w':
                task.notify_time = datetime.now() + timedelta(weeks=1)

            task.is_created = True
            bot.send_message(message.chat.id, '–í—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!')

            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)


def notify_thread():
    while True:
        for task in tasks:
            if not task.notify_time:
                continue

            if task.notify_time.date() == datetime.now().date():
                if task.notify_time.time().hour == datetime.now().hour and \
                        task.notify_time.time().minute == datetime.now().minute:
                    if task.text:
                        bot.send_message(task.user_id, f'–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ\n<b>{task.text}</b>')
                    else:
                        bot.send_message(task.user_id, '–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ...')
                        bot.send_voice(task.user_id, task.audio_path)

                    tasks.remove(task)

        sleep(1)


if __name__ == '__main__':
    print('BOT STARTED')
    start_new_thread(notify_thread, tuple(), {})
    bot.polling(True)
